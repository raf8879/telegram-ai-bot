import asyncio
import logging
import json
from datetime import datetime, timedelta
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import openai
from pydub import AudioSegment
from gtts import gTTS
from aiogram.types import FSInputFile
from dotenv import load_dotenv
import os
from difflib import SequenceMatcher
import subprocess
import tempfile
import string
import whisper
from phonemizer import phonemize
from difflib import SequenceMatcher
import Levenshtein
import editdistance
from collections import Counter
import functools
import warnings
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat



async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="contact", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

    OWNER_ID = your_telegram_id  # –í–∞—à Telegram ID
    private_commands = commands + [
        BotCommand(command="analytics_1", description="–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="analytics_2", description="–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
    ]
    await bot.set_my_commands(private_commands, scope=BotCommandScopeChat(chat_id=OWNER_ID))

warnings.filterwarnings("ignore", message="FP16 is not supported on CPU; using FP32 instead")
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(Command("contact"))
async def send_contact(message: Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://t.me/raf8879)", parse_mode="Markdown")


class ChatStates(StatesGroup):
    waiting_for_input = State()
    choosing_role = State()
    setting_custom_role = State()
    generating_image = State()
    waiting_for_voice = State()
    choosing_difficulty = State()
    choosing_topic = State()
    waiting_for_mode = State()
    conversation_mode = State()
    pronunciation_mode = State()
    waiting_for_reference_text = State()
    image_generation_options = State()


# –¢–µ–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
topics = ["Job Interview", "Weather", "Travel", "About Myself"]

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
difficulty_levels = {
    "A1": "simple and short sentences with basic vocabulary.",
    "A2": "slightly longer sentences with more varied vocabulary.",
    "B1": "complex sentences with intermediate vocabulary and grammar.",
    "B2": "long and detailed sentences with upper-intermediate vocabulary.",
    "C1": "advanced sentences with idioms and professional terms.",
    "C2": "highly advanced sentences with academic or professional phrasing.",
}

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
predefined_roles = {
    "ESL Tutor": "You are an ESL tutor helping students learn English.",
    "Math Teacher": "You are a math teacher assisting with math problems.",
    "Psychologist": "You are a psychologist providing support and guidance on anxiety.",
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_activity = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
ANALYTICS_FILE = 'analytics.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_analytics():
    if os.path.exists(ANALYTICS_FILE):
        with open(ANALYTICS_FILE, 'r') as f:
            analytics_data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
            analytics_data['total_users'] = set(analytics_data['total_users'])

    else:
        analytics_data = {
            'total_users': set(),
            'total_messages': 0,
        }
    return analytics_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_analytics(analytics_data):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
    analytics_data_copy = analytics_data.copy()
    analytics_data_copy['total_users'] = list(analytics_data['total_users'])
    with open(ANALYTICS_FILE, 'w') as f:
        json.dump(analytics_data_copy, f)



# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
analytics_data = load_analytics()


async def clear_user_context():
    while True:
        current_time = datetime.now()
        for user_id in list(user_last_activity.keys()):
            last_active = user_last_activity[user_id]
            if current_time - last_active > timedelta(minutes=15):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ storage.clear_state() –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await storage.clear_state(chat_id=user_id, user_id=user_id)
                logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                del user_last_activity[user_id]
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

@dp.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    global analytics_data
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
    if user_id not in analytics_data['total_users']:
        analytics_data['total_users'].add(user_id)
        save_analytics(analytics_data)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.button(text='üìù Text chat')
    kb_builder.button(text='üñº Image generation')
    kb_builder.button(text='üó£ Conversation Mode')
    kb_builder.button(text='üéô Pronunciation Check')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    kb_builder.adjust(2, 2)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏, –≤—Ç–æ—Ä–∞—è - 1 –∫–Ω–æ–ø–∫–∞

    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer("Welcome! Select a mode of operation:", reply_markup=keyboard)
    await state.clear()


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.message(F.text == 'üéô Pronunciation Check')
async def pronunciation_menu(message: Message, state: FSMContext):
    update_user_activity(message.from_user.id, message.from_user.full_name, feature='pronunciation_check')
    user_last_activity[message.from_user.id] = datetime.now()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    kb_builder = ReplyKeyboardBuilder()
    for level in difficulty_levels.keys():
        kb_builder.button(text=level)
    kb_builder.button(text='üîô Back')

    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É)
    kb_builder.adjust(2)

    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer("Choose your difficulty level:", reply_markup=keyboard)
    await state.set_state(ChatStates.choosing_difficulty)


# –í—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.message(ChatStates.choosing_difficulty, F.text.in_(difficulty_levels.keys()))
async def choose_difficulty(message: Message, state: FSMContext):
    user_last_activity[message.from_user.id] = datetime.now()

    level = message.text
    await state.update_data(level=level)

    # –¢–µ–º—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
    topics = ["Job Interview", "Travel", "About Myself", "Weather"]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb_builder = ReplyKeyboardBuilder()
    for topic in topics:
        kb_builder.button(text=topic)
    kb_builder.button(text='üîô Back')

    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É)
    kb_builder.adjust(2)

    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer("Choose a topic for practice:", reply_markup=keyboard)
    await state.set_state(ChatStates.choosing_topic)
import random
@dp.message(ChatStates.choosing_topic, F.text.in_(topics))
async def generate_practice_sentence(message: Message, state: FSMContext):
    user_data = await state.get_data()
    level = user_data.get("level", "A1")
    topic = message.text
    previous_sentences = user_data.get("previous_sentences", [])

    adjectives = ["interesting", "engaging", "thought-provoking", "funny", "unusual"]
    chosen_adjective = random.choice(adjectives)

    previous_sentences_text = ' | '.join(previous_sentences) if previous_sentences else "None"

    prompt = (
        f"Generate 5 unique and {chosen_adjective} sentences about '{topic}' for English learners at level {level}. "
        f"Each sentence should be {difficulty_levels[level]} "
        f"and different from each other and from these sentences: {previous_sentences_text}. "
        f"Provide the sentences in a numbered list."
    )

    await message.answer(f"Generating a practice sentence for level {level} and topic '{topic}'...")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a helpful assistant creating sentences for English practice."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.9,
            presence_penalty=0.6,
            frequency_penalty=0.5,
        )
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        sentences = response['choices'][0]['message']['content'].strip().split('\n')
        sentences = [s.strip().lstrip('12345. ') for s in sentences if s.strip()]
        practice_sentence = random.choice(sentences)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        previous_sentences.append(practice_sentence)
        await state.update_data(previous_sentences=previous_sentences)

        await state.update_data(reference_text=practice_sentence)
        await message.answer(
            f"Here is your practice sentence:\n\n'{practice_sentence}'\n\n"
            "Please send a voice message reading this sentence."
        )
        await state.set_state(ChatStates.waiting_for_voice)
    except Exception as e:
        logging.error(f"Error generating practice sentence: {e}")
        await message.answer("An error occurred. Please try again.")

model = whisper.load_model("base", device="cpu", download_root="./models")






def generate_retry_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ Try Again")],
            [KeyboardButton(text="üÜï New Sentence")],
            [KeyboardButton(text="Back")]
        ],
        resize_keyboard=True,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    return keyboard


@dp.message(F.text == "üîÑ Try Again")
async def try_again(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    user_data = await state.get_data()
    reference_text = user_data.get("reference_text", "No sentence found.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    await message.answer(f"Please repeat the sentence:\n'{reference_text}'")


@dp.message(F.text == "üÜï New Sentence")
async def new_sentence(message: Message, state: FSMContext):
    await pronunciation_menu(message, state)


@dp.message(F.text == "Back")
async def back_to_main_menu(message: Message, state: FSMContext):
    await cmd_start(message, state)


@dp.message(F.text == 'üìù Text chat')
async def test_chat_menu(message: Message, state: FSMContext):
    update_user_activity(message.from_user.id, message.from_user.full_name, feature='text_chat')
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb_builder = ReplyKeyboardBuilder()
    for role in predefined_roles.keys():
        kb_builder.button(text=role)
    kb_builder.button(text='üÜï Own role')
    kb_builder.button(text='üîô Back')
    kb_builder.adjust(2, 2)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer("Choose a role or set your own:", reply_markup=keyboard)
    await state.set_state(ChatStates.choosing_role)


@dp.message(ChatStates.choosing_role, F.text.in_(list(predefined_roles.keys())))
async def set_role(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    role = predefined_roles[message.text]
    await state.update_data(role=role, messages=[])
    await message.answer(f"Role set: '{message.text}'. You can start communicating.")
    await state.set_state(ChatStates.waiting_for_input)


@dp.message(ChatStates.choosing_role, F.text == 'üÜï Own role')
async def custom_role_prompt(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    await message.answer("Please describe the role that ChatGPT should take on:")
    await state.set_state(ChatStates.setting_custom_role)


@dp.message(ChatStates.setting_custom_role)
async def set_custom_role(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    role = message.text.strip()
    await state.update_data(role=role, messages=[])
    await message.answer("Custom role set. You can start communicating.")
    await state.set_state(ChatStates.waiting_for_input)


@dp.message(F.text == "üó£ Conversation Mode")
async def conversation_mode(message: Message, state: FSMContext):
    update_user_activity(message.from_user.id, message.from_user.full_name, feature='conversation_mode')
    user_last_activity[message.from_user.id] = datetime.now()
    await message.answer(
        "You have entered Conversation mode for practicing English.\n"
        "The bot will help you with grammar, pronunciation, vocabulary, and communication.\n"
        "If you want to clear the history, enter the /clear command.\n"
        "Start the dialogue!"
    )
    await state.update_data(role="You are a friendly conversational partner helping the user practice English.", messages=[])
    await state.set_state(ChatStates.conversation_mode)


@dp.message(F.voice, ChatStates.conversation_mode)
async def handle_voice_message(message: Message, state: FSMContext):
    user_last_activity[message.from_user.id] = datetime.now()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_file = await bot.get_file(message.voice.file_id)
        file_path = voice_file.file_path

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        with tempfile.TemporaryDirectory() as tmpdir:
            ogg_path = os.path.join(tmpdir, f"{message.voice.file_id}.ogg")
            wav_path = os.path.join(tmpdir, f"{message.voice.file_id}.wav")
            await bot.download_file(file_path, destination=ogg_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav
            audio = AudioSegment.from_file(ogg_path)
            audio.export(wav_path, format="wav")

            # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Whisper
            transcription = model.transcribe(wav_path, language="en")
            user_text = transcription["text"].strip()
            logger.info(f"Recognized text: {user_text}")
            await message.answer(f"You said: {user_text}")

            # –†–∞–±–æ—Ç–∞ —Å ChatGPT
            user_data = await state.get_data()
            role = user_data.get('role', "You are a friendly and knowledgeable English tutor. "
                                         "You help the user practice English by providing guidance on grammar, pronunciation, vocabulary, and general conversation. "
                                         "Always be encouraging, patient, and provide detailed explanations if the user asks for help. "
                                         "Make sure to correct mistakes politely and suggest improvements where necessary.")
            messages = user_data.get('messages', [])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            messages.append({"role": "user", "content": user_text})
            if len(messages) > 20:
                messages = messages[-20:]

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": role},
                        *messages,
                    ],
                    max_tokens=150,
                    temperature=0.7,
                )
                bot_reply = response['choices'][0]['message']['content']
            except Exception as e:
                logger.error(f"Error when accessing the API: {e}")
                await message.answer("An error occurred while processing the request. Please try again.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            messages.append({"role": "assistant", "content": bot_reply})
            await state.update_data(messages=messages)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º gTTS –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
                tts = gTTS(text=bot_reply, lang="en")
                response_voice_path = os.path.join(tmpdir,
                                                   f"{message.from_user.id}_{datetime.now().timestamp()}_response.ogg")
                tts.save(response_voice_path)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                voice = FSInputFile(response_voice_path)
                await message.answer_voice(voice)
            except Exception as e:
                logger.error(f"Error generating voice response: {e}")
                await message.answer("An error occurred while generating the voice response. Please try again.")

    except Exception as e:
        logger.error(f"Error processing voice message: {e}")
        await message.answer("An error occurred while processing your voice message. Please try again.")


@dp.message(F.text == 'üñº Image generation')
async def image_generation_prompt(message: Message, state: FSMContext):
    update_user_activity(message.from_user.id, message.from_user.full_name, feature='image_generation')
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    await message.answer("Please describe the image you want to generate:")
    await state.set_state(ChatStates.generating_image)


@dp.message(F.text == 'üîô Back')
async def back_to_main_menu(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    await cmd_start(message, state)


@dp.message(Command('clear'))
async def clear_context(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    await state.update_data(messages=[])
    await message.answer("The context has been cleared.")


@dp.message(ChatStates.waiting_for_input)
async def chat_with_gpt(message: Message, state: FSMContext):
    global analytics_data
    user_last_activity[message.from_user.id] = datetime.now()

    user_id = message.from_user.id
    analytics_data['total_messages'] += 1
    save_analytics(analytics_data)

    user_data = await state.get_data()
    role = user_data.get('role', 'You are a helpful assistant.')
    messages = user_data.get('messages', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if message.text and message.text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.text –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        messages.append({"role": "user", "content": message.text.strip()})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [msg for msg in messages if msg.get("content")]  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(messages) > 20:
        messages = messages[-20:]

    try:
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(None, lambda: openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": role},
                *messages
            ],
            max_tokens=150,
            temperature=0.7,
        ))
        reply = response['choices'][0]['message']['content'].strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append({"role": "assistant", "content": reply})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        await state.update_data(messages=messages)

        await message.answer(reply)
    except Exception as e:
        await message.answer("An error occurred when accessing the AI.")
        logger.exception("Error when accessing the API")



def get_image_generation_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ Generate Image Again")],
            [KeyboardButton(text="üîô Back")]
        ],
        resize_keyboard=True,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    return keyboard


@dp.message(F.text == "üîÑ Generate Image Again")
async def generate_image(message: Message, state: FSMContext):
    await image_generation_prompt(message, state)


@dp.message(ChatStates.generating_image)
async def generate_image(message: Message, state: FSMContext):
    global analytics_data
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_activity[message.from_user.id] = datetime.now()

    user_id = message.from_user.id
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    analytics_data['total_messages'] += 1
    save_analytics(analytics_data)

    prompt = message.text.strip()
    await message.answer("Generating image...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(None, lambda: openai.Image.create(
            prompt=prompt,
            model="dall-e-3",
            n=1,
            size="1024x1024",
            quality="standard",
        ))
        image_url = response['data'][0]['url']
    except Exception as e:
        await message.answer("An error occurred while generating the image.")
        logger.exception("An error occurred while generating the image.")
        return

    await message.answer_photo(image_url)
    await state.clear()
    await message.answer(
        "What would you like to do next?",
        reply_markup=get_image_generation_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(ChatStates.image_generation_options)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@dp.message(Command('analytics_1'))
async def show_analytics(message: Message):
    global analytics_data
    OWNER_USER_ID = 5226052650  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram User ID

    if message.from_user.id != OWNER_USER_ID:
        await message.answer("You do not have permission to execute this command.")
        return

    total_users = len(analytics_data['total_users'])
    total_messages = analytics_data.get('total_messages', 0)

    analytics_message = (
        f"üìä Bot usage statistics:\n"
        f"üë• Total number of users: {total_users}\n"
        f"üí¨ Total number of messages: {total_messages}"
    )

    await message.answer(analytics_message)


# –§–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
DETAILED_ANALYTICS_FILE = 'detailed_analytics.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
def load_detailed_analytics():
    if os.path.exists(DETAILED_ANALYTICS_FILE):
        with open(DETAILED_ANALYTICS_FILE, 'r') as f:
            return json.load(f)
    else:
        return {
            'users': {},  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {"name": str, "last_active": str}}
            'daily_stats': {},
            'feature_usage': {  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                'text_chat': 0,
                'image_generation': 0,
                'pronunciation_check': 0,
                'conversation_mode': 0
            }
        }


def save_detailed_analytics(data):
    for date_key, stats in data['daily_stats'].items():
        stats['users'] = list(stats['users'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫
    with open(DETAILED_ANALYTICS_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
detailed_analytics = load_detailed_analytics()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_activity(user_id, user_name, feature=None):
    current_time = datetime.now()
    detailed_analytics['users'][user_id] = {
        "name": user_name,
        "last_active": current_time.isoformat()
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    date_key = current_time.strftime('%Y-%m-%d')
    if date_key not in detailed_analytics['daily_stats']:
        detailed_analytics['daily_stats'][date_key] = {'messages': 0, 'users': set()}
    detailed_analytics['daily_stats'][date_key]['messages'] += 1
    for date_key, stats in detailed_analytics['daily_stats'].items():
        stats['users'] = set(stats['users'])
    detailed_analytics['daily_stats'][date_key]['users'].add(user_id)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    if feature:
        if feature not in detailed_analytics['feature_usage']:
            detailed_analytics['feature_usage'][feature] = 0
        detailed_analytics['feature_usage'][feature] += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_detailed_analytics(detailed_analytics)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
#
def get_detailed_analytics():
    current_time = datetime.now()
    total_users = len(detailed_analytics['users'])
    user_names = list(set([details["name"] for details in detailed_analytics['users'].values()]))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    users_data = {str(user_id): details for user_id, details in detailed_analytics['users'].items()}

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    last_hour_users = [
        user_id for user_id, details in users_data.items()
        if current_time - datetime.fromisoformat(details["last_active"]) <= timedelta(hours=1)
    ]

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
    date_key = current_time.strftime('%Y-%m-%d')
    today_stats = detailed_analytics['daily_stats'].get(date_key, {})
    today_users = len(today_stats.get('users', set()))
    today_messages = today_stats.get('messages', 0)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_users = {
        user_id for user_id, details in users_data.items()
        if current_time - datetime.fromisoformat(details["last_active"]) <= timedelta(weeks=1)
    }
    week_messages = sum(
        stats.get('messages', 0)
        for date, stats in detailed_analytics['daily_stats'].items()
        if current_time - datetime.strptime(date, '%Y-%m-%d') <= timedelta(weeks=1)
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü
    month_users = {
        user_id for user_id, details in users_data.items()
        if current_time - datetime.fromisoformat(details["last_active"]) <= timedelta(days=30)
    }
    month_messages = sum(
        stats.get('messages', 0)
        for date, stats in detailed_analytics['daily_stats'].items()
        if current_time - datetime.strptime(date, '%Y-%m-%d') <= timedelta(days=30)
    )

    # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    avg_messages_per_user = today_messages / today_users if today_users > 0 else 0

    # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –¥–µ–Ω—å
    user_message_count = {}
    for user_id in today_stats.get('users', []):
        user_id = str(user_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
        user_message_count[user_id] = user_message_count.get(user_id, 0) + 1
    most_active_user = max(user_message_count, key=user_message_count.get, default="None")
    most_active_user_messages = user_message_count.get(most_active_user, 0)

    return {
        "total_users": total_users,
        "user_names": user_names,
        "last_hour_users": len(set(last_hour_users)),
        "today_users": today_users,
        "week_users": len(set(week_users)),
        "month_users": len(set(month_users)),
        "feature_usage": detailed_analytics.get('feature_usage', {})
    }


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /analytics_2
@dp.message(Command('analytics_2'))
async def show_detailed_analytics(message: Message):
    OWNER_USER_ID = 5226052650  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram User ID

    if message.from_user.id != OWNER_USER_ID:
        await message.answer("You do not have permission to execute this command.")
        return

    analytics = get_detailed_analytics()

    analytics_message = (
        f"üìä **Bot Analytics:**\n"
        f"üë• Total Users: {analytics['total_users']}\n"
        f"üìã Names of Users: {', '.join(analytics['user_names'])}\n"
        f"üïí Active Users (Last Hour): {analytics['last_hour_users']}\n"
        f"üìÜ Active Users (Today): {analytics['today_users']}\n"
        f"üìÖ Active Users (This Week): {analytics['week_users']}\n"
        f"üìà Active Users (This Month): {analytics['month_users']}\n\n"
        f"üìå **Feature Usage:**\n"
        f"üìù Text Chat: {analytics['feature_usage'].get('text_chat', 0)}\n"
        f"üñº Image Generation: {analytics['feature_usage'].get('image_generation', 0)}\n"
        f"üéô Pronunciation Check: {analytics['feature_usage'].get('pronunciation_check', 0)}\n"
        f"üó£ Conversation Mode: {analytics['feature_usage'].get('conversation_mode', 0)}\n"
    )

    await message.answer(analytics_message)


# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def track_activity(message: Message):
    update_user_activity(message.from_user.id, message.from_user.full_name)


async def main():
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ clear_user_context() –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    await set_bot_commands(bot)
    asyncio.create_task(clear_user_context())
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())






